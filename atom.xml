<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青开君の学习小站</title>
  
  <subtitle>天行健，君子以自强不息；地势坤，君子以厚德载物</subtitle>
  <link href="https://jingyan-z.github.io/atom.xml" rel="self"/>
  
  <link href="https://jingyan-z.github.io/"/>
  <updated>2025-07-13T01:48:53.756Z</updated>
  <id>https://jingyan-z.github.io/</id>
  
  <author>
    <name>青开君</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Slurm作业提交</title>
    <link href="https://jingyan-z.github.io/2025/07/13/slurm-jobsubmission/"/>
    <id>https://jingyan-z.github.io/2025/07/13/slurm-jobsubmission/</id>
    <published>2025-07-13T01:46:52.000Z</published>
    <updated>2025-07-13T01:48:53.756Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>HuggingFace和大模型API使用指南</title>
    <link href="https://jingyan-z.github.io/2025/07/11/NLP-huggingface-guide/"/>
    <id>https://jingyan-z.github.io/2025/07/11/NLP-huggingface-guide/</id>
    <published>2025-07-11T06:09:14.000Z</published>
    <updated>2025-07-12T01:43:01.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-从HuggingFace获取数据集"><a href="#1-从HuggingFace获取数据集" class="headerlink" title="1. 从HuggingFace获取数据集"></a>1. 从HuggingFace获取数据集</h2><h3 id="1-1-从远程仓库加载"><a href="#1-1-从远程仓库加载" class="headerlink" title="1.1 从远程仓库加载"></a>1.1 从远程仓库加载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line">dataset = load_dataset(<span class="string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前几条</span></span><br><span class="line"><span class="built_in">print</span>(dataset[<span class="string">&quot;train&quot;</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>financial news: <code>Zihan1004/FNSPID</code></p><p>如果不指明参数split，则返回DatasetDict对象，所有的split（如：train、validation、test）一起返回。如上例的rotten_tomatoes数据集返回结果。<br>如果指明split参数split，则返回Dataset对象，为具体的split。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line">dataset = load_dataset(<span class="string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="string">&quot;train&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-从本地文件加载"><a href="#1-2-从本地文件加载" class="headerlink" title="1.2 从本地文件加载"></a>1.2 从本地文件加载</h3><p>JSON文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line">dataset = load_dataset(<span class="string">&#x27;json&#x27;</span>, data_files=<span class="string">&#x27;path_to_file.json&#x27;</span>)</span><br></pre></td></tr></table></figure><p>CSV文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line">dataset = load_dataset(<span class="string">&#x27;csv&#x27;</span>, data_files=<span class="string">&#x27;path_to_file.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Arrow文件：Arrow文件是datasets库的默认存储格式，加载它们会非常快速。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line">dataset = load_dataset(<span class="string">&#x27;path_to_file.arrow&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以以字典的形式赋值给data_files参数，来自由定义返回DatasetDict对象的split。</p><p>一般地，大多以arrow格式存储的数据集，会很规范地将3个split分为3个文件，如：数据集cnn_dailymail的文件分为了cnn_dailymail-train.arrow, cnn_dailymail-validation.arrow, cnn_dailymail-test.arrow三部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arrow_dir_cnndm = <span class="string">r&#x27;D:\datasets\cnn_dailymail\3.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">dataset = load_dataset(path=arrow_dir_cnndm, data_files=</span><br><span class="line">                       &#123;<span class="string">&#x27;train&#x27;</span>: os.path.join(arrow_dir_cnndm, <span class="string">&#x27;cnn_dailymail-train.arrow&#x27;</span>), </span><br><span class="line">                        <span class="string">&#x27;validation&#x27;</span>: os.path.join(arrow_dir_cnndm, <span class="string">&#x27;cnn_dailymail-validation.arrow&#x27;</span>), </span><br><span class="line">                        <span class="string">&#x27;test&#x27;</span>: os.path.join(arrow_dir_cnndm, <span class="string">&#x27;cnn_dailymail-test.arrow&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-大模型调用（以deepseek为例）"><a href="#2-大模型调用（以deepseek为例）" class="headerlink" title="2. 大模型调用（以deepseek为例）"></a>2. 大模型调用（以deepseek为例）</h2><h3 id="2-1-获取API-Key"><a href="#2-1-获取API-Key" class="headerlink" title="2.1 获取API Key"></a>2.1 获取API Key</h3><p>登录DeepSeek平台，创建密钥；</p><h3 id="2-2-调用示例（Python）"><a href="#2-2-调用示例（Python）" class="headerlink" title="2.2 调用示例（Python）"></a>2.2 调用示例（Python）</h3><p>在python中设置你的api key 和base url </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set your OpenAI API key and base URL</span></span><br><span class="line">openai = OpenAI(</span><br><span class="line">    api_key=  <span class="string">&quot;sk-UqWVh1ah1ZYaFFANC5k3yhSWA6pRDykIGiw8DVK3u1RIGuMx&quot;</span>,</span><br><span class="line">    base_url=<span class="string">&quot;https://www.chataiapi.com/v1&quot;</span> <span class="comment">#大规模AI模型推理API的云平台，面向开源模型的有DeepInfra</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">chat_completion = openai.chat.completions.create(</span><br><span class="line">      model=<span class="string">&#x27;deepseek-r1&#x27;</span>,</span><br><span class="line">      messages=[</span><br><span class="line">          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a stand-up comedian&quot;</span>&#125;,</span><br><span class="line">          &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Tell me a joke&quot;</span>&#125;,</span><br><span class="line">      ],</span><br><span class="line">      temperature=<span class="number">0</span>,</span><br><span class="line">      max_tokens=<span class="number">50</span>,</span><br><span class="line">      stream=<span class="literal">False</span></span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(chat_completion)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-从HuggingFace获取数据集&quot;&gt;&lt;a href=&quot;#1-从HuggingFace获取数据集&quot; class=&quot;headerlink&quot; title=&quot;1. 从HuggingFace获取数据集&quot;&gt;&lt;/a&gt;1. 从HuggingFace获取数据集&lt;/h2&gt;&lt;h3</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FinRL环境搭建</title>
    <link href="https://jingyan-z.github.io/2024/05/28/finrl-settings/"/>
    <id>https://jingyan-z.github.io/2024/05/28/finrl-settings/</id>
    <published>2024-05-28T07:20:22.000Z</published>
    <updated>2025-07-13T02:49:35.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><p>创建环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name py310 python=3.10.12 ipykernel</span><br></pre></td></tr></table></figure><p>激活环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> activate py310</span><br><span class="line">Conda activate py310</span><br></pre></td></tr></table></figure><p>退出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h3 id="安装ipykernel"><a href="#安装ipykernel" class="headerlink" title="安装ipykernel"></a>安装ipykernel</h3><p>在虚拟环境中安装ipykernel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n py310 ipykernel</span><br></pre></td></tr></table></figure><p>将虚拟环境加入内核中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m ipykernel install --name=env_name(想要保存的环境名)</span><br></pre></td></tr></table></figure><p>（报错可以执行条命令时添加–user）</p><p>补充：</p><ol><li>激活你需要作为kernel的虚拟环境</li><li>安装ipykernel<br>conda install ipykernel</li><li>添加kernel<br>python -m ipykernel install –user –name [虚拟环境名称]</li><li>查看所有kernel<br>jupyter kernelspec list</li><li>删除kernel<br>jupyter kernelspec remove [kernel名称]</li></ol><h2 id="安装安装finrl"><a href="#安装安装finrl" class="headerlink" title="安装安装finrl"></a>安装安装finrl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /etc/sudoers.d</span><br></pre></td></tr></table></figure><p>如果没有文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">Apt-get install sudo</span><br></pre></td></tr></table></figure><p>接下来安装finrl所依赖的各种包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install curl</span><br><span class="line">sudo apt-get install libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6</span><br></pre></td></tr></table></figure><p>安装OPENAI：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install gcc g++ cmake libopenmpi-dev python3-dev zlib1g-dev libgl1-mesa-glx swig</span><br></pre></td></tr></table></figure><p>如果服务器没有sudo权限（比如学校服务器），就用<code>conda install</code></p><p>最后安装finrl：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/AI4Finance-Foundation/FinRL.git</span><br></pre></td></tr></table></figure><h2 id="踩坑指南"><a href="#踩坑指南" class="headerlink" title="踩坑指南"></a>踩坑指南</h2><h3 id="Jupyter路径和终端环境里面的路径不一致："><a href="#Jupyter路径和终端环境里面的路径不一致：" class="headerlink" title="Jupyter路径和终端环境里面的路径不一致："></a>Jupyter路径和终端环境里面的路径不一致：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.executable 查看路径</span><br></pre></td></tr></table></figure><p>查看kernel list:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jupyter kernelspec list</span><br></pre></td></tr></table></figure><p>进入到环境的路径里修改kernel.json文件里的路径：<br>/root/miniconda3/envs/py310/bin/python</p><p>pytorch与cuda版本关系<br>——– | —–<br>cuda版本|支持pytorch版本<br>cuda10.2    1.5 | 1.12<br>cuda11.0    1.7 | 1.7.1<br>cuda11.1    1.8 | 1.10.1<br>cuda11.3    1.8.1 | 1.12.1<br>cuda11.6    1.12.0 | 1.13.1<br>cuda11.7    1.13.0 | 2.0.1<br>cuda11.8    2.0.0 | 2.1.1<br>cuda12.1    2.1.0 | 2.1.1</p><p>cuda 与 cudnn关系<br>——– | —–<br>cuda版本    |支持cudnn版本<br>cuda10.2    v7.6.5 | v8.7.0<br>cuda11.3    v8.2.0 | v8.9.6</p><p>pytorch 与 python关系<br>——– |——–| ——–<br>torch    |torchvision    |Python<br>main / nightly|    main / nightly    |&gt;=3.8, &lt;=3.11<br>2.0    |0.15    |&gt;=3.8, &lt;=3.11<br>1.13    |0.14    |&gt;=3.7.2, &lt;=3.10<br>1.12    |0.13    |&gt;=3.7, &lt;=3.10<br>1.11    |0.12    |&gt;=3.7, &lt;=3.10<br>1.10|    0.11    |&gt;=3.6, &lt;=3.9<br>1.9    |0.10    |&gt;=3.6, &lt;=3.9<br>1.8    |0.9|    &gt;=3.6, &lt;=3.9<br>1.7    |0.8    |&gt;=3.6, &lt;=3.9<br>1.6    |0.7    |&gt;=3.6, &lt;=3.8<br>1.5    |0.6    |&gt;=3.5, &lt;=3.8<br>1.4    |0.5|    ==2.7, &gt;=3.5, &lt;=3.8<br>1.3    |0.4.2 / 0.4.3|    ==2.7, &gt;=3.5, &lt;=3.7<br>1.2    |0.4.1    |==2.7, &gt;=3.5, &lt;=3.7<br>1.1    |0.3|    ==2.7, &gt;=3.5, &lt;=3.7<br>&lt;=1.0    0.2    |==2.7, &gt;=3.5, &lt;=3.7</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;h3 id=&quot;创建环境&quot;&gt;&lt;a href=&quot;#创建环境&quot; class=&quot;headerlink&quot; title=&quot;创建环境&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>花式踩坑指南</title>
    <link href="https://jingyan-z.github.io/2022/06/01/huashicaikeng/"/>
    <id>https://jingyan-z.github.io/2022/06/01/huashicaikeng/</id>
    <published>2022-06-01T05:58:59.000Z</published>
    <updated>2025-07-12T03:09:58.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-python加载超大数据集"><a href="#1-python加载超大数据集" class="headerlink" title="1. python加载超大数据集"></a>1. python加载超大数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">chunks = pd.read_csv(input_csv_path, encoding=<span class="string">&quot;utf-8&quot;</span>, chunksize=<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#加了iterator=True 才会一直往下读csv，否则读了前100万行就退出了</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start = time.time()</span><br><span class="line">chunck_df = pd.read_csv(</span><br><span class="line">    <span class="string">&#x27;/Users/jingyan/Desktop/ESG-LLM-RL/code/nasdaq_exteral_data.csv&#x27;</span>, <span class="comment">#文件路径</span></span><br><span class="line">    chunksize=<span class="number">1000</span>, <span class="comment">#块大小</span></span><br><span class="line">    iterator=<span class="literal">True</span>) <span class="comment">#读取1000000万行后继续往下读</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunck_df):</span><br><span class="line">    data.to_csv(<span class="string">&#x27;/Users/jingyan/Desktop/ESG-LLM-RL/code/chunk.csv&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-ssh连接github"><a href="#2-ssh连接github" class="headerlink" title="2. ssh连接github"></a>2. ssh连接github</h2><p>打开terminal，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>默认文件夹：Enter a file in which to save the key (/Users/YOU/.ssh/id_ALGORITHM): [Press enter]</p><blockquote><p>Enter passphrase (empty for no passphrase): [Type a passphrase]<br>Enter same passphrase again: [Type passphrase again]</p></blockquote><p>查看公钥内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>登录github，进入settings-SSH and GPG keys，点击New SSH key，粘贴公钥，保存</p><p>测试是否连接成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>成功：Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.</p><h2 id="3-Error-package-or-namespace-load-failed-for-‘gsl’"><a href="#3-Error-package-or-namespace-load-failed-for-‘gsl’" class="headerlink" title="3. Error: package or namespace load failed for ‘gsl’"></a>3. Error: package or namespace load failed for ‘gsl’</h2><h3 id="3-1-在conda环境中安装gsl"><a href="#3-1-在conda环境中安装gsl" class="headerlink" title="3.1 在conda环境中安装gsl:"></a>3.1 在conda环境中安装gsl:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge gsl</span><br></pre></td></tr></table></figure><p>This installs GSL and its shared libraries (libgsl.so.*) into your environment, which R can then link to.</p><p>Verify that <code>libgsl.so.25</code> exists</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find <span class="variable">$CONDA_PREFIX</span> -name <span class="string">&quot;libgsl.so*&quot;</span></span><br></pre></td></tr></table></figure><p>If it shows a path like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/u2024000134/anaconda3/lib/libgsl.so.27</span><br></pre></td></tr></table></figure><p>but not libgsl.so.25, your R package may be built against an older version.</p><h3 id="3-2-在R中安装gsl-package"><a href="#3-2-在R中安装gsl-package" class="headerlink" title="3.2 在R中安装gsl package"></a>3.2 在R中安装gsl package</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages(<span class="string">&quot;gsl&quot;</span>)</span><br></pre></td></tr></table></figure><p>Ensure your library paths are correctly set</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sys.getenv(<span class="string">&quot;LD_LIBRARY_PATH&quot;</span>)</span><br></pre></td></tr></table></figure><p>If it does not include the directory containing libgsl.so, prepend it before starting R:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$CONDA_PREFIX</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">R</span><br><span class="line">```R</span><br><span class="line"></span><br><span class="line">or within R</span><br><span class="line">```R</span><br><span class="line">Sys.setenv(LD_LIBRARY_PATH=paste(Sys.getenv(<span class="string">&quot;CONDA_PREFIX&quot;</span>), <span class="string">&quot;lib&quot;</span>, sep=<span class="string">&quot;/&quot;</span>))</span><br></pre></td></tr></table></figure><p>Restart R after installation. Then test:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">library(gsl)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-python加载超大数据集&quot;&gt;&lt;a href=&quot;#1-python加载超大数据集&quot; class=&quot;headerlink&quot; title=&quot;1. python加载超大数据集&quot;&gt;&lt;/a&gt;1. python加载超大数据集&lt;/h2&gt;&lt;figure class=&quot;high</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在Linux服务器上安装Anaconda</title>
    <link href="https://jingyan-z.github.io/2022/01/10/anaconda-settings/"/>
    <id>https://jingyan-z.github.io/2022/01/10/anaconda-settings/</id>
    <published>2022-01-10T04:06:36.000Z</published>
    <updated>2025-07-12T12:27:38.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装Anaconda"><a href="#1-安装Anaconda" class="headerlink" title="1. 安装Anaconda"></a>1. 安装Anaconda</h2><h3 id="1-1-下载anaconda安装包："><a href="#1-1-下载anaconda安装包：" class="headerlink" title="1.1 下载anaconda安装包："></a>1.1 下载anaconda安装包：</h3><p>在官网查找自己需要的版本<br><code>https://repo.anaconda.com/archive/</code></p><p>以版本Anaconda3-2025.06-0-Linux-x86_64.sh为例：<br><a href="https://repo.anaconda.com/archive/Anaconda3-2025.06-0-Linux-x86_64.sh">https://repo.anaconda.com/archive/Anaconda3-2025.06-0-Linux-x86_64.sh</a></p><p>在terminal输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/archive/Anaconda3-2025.06-0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><h3 id="1-2-安装Anaconda"><a href="#1-2-安装Anaconda" class="headerlink" title="1.2 安装Anaconda"></a>1.2 安装Anaconda</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x Anaconda3-2025.06-0-Linux-x86_64.sh</span><br><span class="line">./Anaconda3-5.3.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>若显示Anaconda的信息，并且会出现More，继续按Enter；显示Do you accept license? 输入yes点enter；输入yes添加环境变量</p><p>Note:如果你直接跳过这部设置环境变量，则需要自己到这个文件夹设置你安装Anaconda路径：<code>/home/u2024000134/.bashrc</code></p><p>单击进去在最后一行添加并把之前一行注释掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/nvidia/bin:/usr/<span class="built_in">local</span>/cuda/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/sbin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/root/anaconda3/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>然后保存更改，输入指令：<code>source ~/.bashrc</code></p><p>检测是否安装成功：<code>conda -V</code></p><h2 id="2-Anaconda创建虚拟环境"><a href="#2-Anaconda创建虚拟环境" class="headerlink" title="2. Anaconda创建虚拟环境"></a>2. Anaconda创建虚拟环境</h2><h3 id="2-1-创建虚拟环境："><a href="#2-1-创建虚拟环境：" class="headerlink" title="2.1 创建虚拟环境："></a>2.1 创建虚拟环境：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n myenv python=3.10</span><br></pre></td></tr></table></figure><p>myenv是自己取的虚拟空间的名字；python是在空间中安装的python，python=3.10指安装特定版本的python，也可以不指定；若安装R，则把python替换为R</p><h3 id="2-2-激活和退出虚拟环境："><a href="#2-2-激活和退出虚拟环境：" class="headerlink" title="2.2 激活和退出虚拟环境："></a>2.2 激活和退出虚拟环境：</h3><p>激活环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> activate myenv </span><br></pre></td></tr></table></figure><p>退出环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h3 id="2-3-删除虚拟环境："><a href="#2-3-删除虚拟环境：" class="headerlink" title="2.3 删除虚拟环境："></a>2.3 删除虚拟环境：</h3><p>首先退出环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate </span><br></pre></td></tr></table></figure><p>查看虚拟环境列表，此时出现列表的同时还会显示其所在路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><p>删除环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env remove -n myenv --all</span><br></pre></td></tr></table></figure><h2 id="3-踩坑指南"><a href="#3-踩坑指南" class="headerlink" title="3. 踩坑指南"></a>3. 踩坑指南</h2><h3 id="bash-wget-command-not-found"><a href="#bash-wget-command-not-found" class="headerlink" title="bash: wget: command not found"></a>bash: wget: command not found</h3><p>解决办法：</p><p>如果没有wget需要先安装</p><p>Debian/ubuntu需要执行以下命令：<code>apt-get install -y wget</code></p><p>CentOS系统则需要输入下面指令: <code>yum install wget -y</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-安装Anaconda&quot;&gt;&lt;a href=&quot;#1-安装Anaconda&quot; class=&quot;headerlink&quot; title=&quot;1. 安装Anaconda&quot;&gt;&lt;/a&gt;1. 安装Anaconda&lt;/h2&gt;&lt;h3 id=&quot;1-1-下载anaconda安装包：&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客主题设置（Butterfly）</title>
    <link href="https://jingyan-z.github.io/2021/11/02/theme-settings/"/>
    <id>https://jingyan-z.github.io/2021/11/02/theme-settings/</id>
    <published>2021-11-02T19:50:46.000Z</published>
    <updated>2025-07-11T08:03:47.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-基本设置"><a href="#1-基本设置" class="headerlink" title="1. 基本设置"></a>1. 基本设置</h2><p>首先将主题中的<code>_config.yml</code>拷贝至博客根目录，并重命名为<code>_config.butterfly.yml</code></p><p>在<code>_config.yml</code>中设置博客名、作者、语言等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 青开君の学习小站</span><br><span class="line">subtitle: &#x27;天行健，君子以自强不息；地势坤，君子以厚德载物&#x27;</span><br><span class="line">description: &#x27;&#x27;</span><br><span class="line">keywords:</span><br><span class="line">author: 青开君</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>URL改成自己的网址，permalink就是文章发布时网址的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://jingyan-z.github.io</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></pre></td></tr></table></figure><p><code>theme</code>就是选择主题，也就是在<code>theme</code>这个文件夹下，在官网有很多<a href="https://hexo.io/themes/">主题</a>，可以自行下载放在<code>theme</code>这个文件夹下，在修改主配置文件的<code>theme</code>参数就可以了，默认安装的是<code>lanscape</code>这个主题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: Butterfly</span><br></pre></td></tr></table></figure><h3 id="1-1-设置subtitle"><a href="#1-1-设置subtitle" class="headerlink" title="1.1 设置subtitle"></a>1.1 设置subtitle</h3><p>在<code>_config.butterfly.yml</code>中设置主页subtitle：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line">  # Typewriter Effect (打字效果)</span><br><span class="line">  effect: true</span><br></pre></td></tr></table></figure><h3 id="1-2-建立标签页、分类页："><a href="#1-2-建立标签页、分类页：" class="headerlink" title="1.2 建立标签页、分类页："></a>1.2 建立标签页、分类页：</h3><p>在博客根目录输入：<code>hexo new page tags</code>，然后在找到<code>source/tags/index.md</code>这个文件，修改这个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">tite: 标签</span><br><span class="line">date: 2019-12-1 00:00:00</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>分类页：<code>hexo new page categories</code></p><h3 id="1-3-语言"><a href="#1-3-语言" class="headerlink" title="1.3 语言"></a>1.3 语言</h3><p>修改站点配置文件<code>_config.yml</code>的<code>language</code>参数</p><p>默认语言是en</p><p>主题支持三种语言</p><ul><li>default(en)</li><li>zh-CN(简体中文)</li><li>zh-TW(繁体中文)</li></ul><h3 id="1-4-导航菜单"><a href="#1-4-导航菜单" class="headerlink" title="1.4 导航菜单"></a>1.4 导航菜单</h3><h3 id="1-5-头像"><a href="#1-5-头像" class="headerlink" title="1.5 头像"></a>1.5 头像</h3><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  img: /img/avatar.png</span><br><span class="line">  effect: true</span><br></pre></td></tr></table></figure><h3 id="1-6-首页图片"><a href="#1-6-首页图片" class="headerlink" title="1.6 首页图片"></a>1.6 首页图片</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The banner image of home page</span><br><span class="line">index_img: /img/banner.png</span><br></pre></td></tr></table></figure><h3 id="1-7-文章图片"><a href="#1-7-文章图片" class="headerlink" title="1.7 文章图片"></a>1.7 文章图片</h3><p>Markdom 文件里面设置cover和top_img</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 博客主题设置（Butterfly）</span><br><span class="line">date: 2021-11-02 20:50:46</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">top_img: /img/cover/cover2.jpeg</span><br><span class="line">cover: /img/cover/cover2.jpeg</span><br></pre></td></tr></table></figure><h2 id="2-个性化配置"><a href="#2-个性化配置" class="headerlink" title="2. 个性化配置"></a>2. 个性化配置</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-基本设置&quot;&gt;&lt;a href=&quot;#1-基本设置&quot; class=&quot;headerlink&quot; title=&quot;1. 基本设置&quot;&gt;&lt;/a&gt;1. 基本设置&lt;/h2&gt;&lt;p&gt;首先将主题中的&lt;code&gt;_config.yml&lt;/code&gt;拷贝至博客根目录，并重命名为&lt;code&gt;_</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo-Git博客搭建：基本配置</title>
    <link href="https://jingyan-z.github.io/2021/11/01/hexo-github-settings/"/>
    <id>https://jingyan-z.github.io/2021/11/01/hexo-github-settings/</id>
    <published>2021-11-01T15:50:58.000Z</published>
    <updated>2025-07-11T08:02:11.952Z</updated>
    
    <content type="html"><![CDATA[<p>基于Hexo和GitHub创建个人博客，总的来说分为三步（MAC版）：</p><ol><li><p>本地配置Hexo，生成静态博客页</p></li><li><p>创建GitHub page</p></li><li><p>将本地Hexo部署到GitHub</p></li></ol><h2 id="1-本地配置Hexo，生成静态博客页"><a href="#1-本地配置Hexo，生成静态博客页" class="headerlink" title="1. 本地配置Hexo，生成静态博客页"></a>1. 本地配置Hexo，生成静态博客页</h2><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><p>首先检查是否安装过Node.js和Git，输入<code>node -v</code>    、<code> npm -v</code>和<code>git --version</code>，若出现版本号则已经安装好了。</p><p>下载Node.js：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p>安装Git（简单方式是安装xcode）： <code>xcode-select --install</code></p><h3 id="1-2-本地配置Hexo"><a href="#1-2-本地配置Hexo" class="headerlink" title="1.2 本地配置Hexo"></a>1.2 本地配置Hexo</h3><p>在本地根目录下建一个博客文件夹<code>Jingyan-Z</code>，打开terminal进入此目录<code>cd Jingyan-Z </code></p><p>输入<code>npm i hexo-cli -g</code>安装Hexo</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，浏览器打开<a href="http://localhost:4000/">http://localhost:4000/</a> 可以预览博客，<code>ctrl+c</code>关掉本地服务器。</p><h2 id="2-创建GitHub-page"><a href="#2-创建GitHub-page" class="headerlink" title="2. 创建GitHub page"></a>2. 创建GitHub page</h2><h3 id="2-1-建立Github仓库"><a href="#2-1-建立Github仓库" class="headerlink" title="2.1 建立Github仓库"></a>2.1 建立Github仓库</h3><p>注册github账号，新建一个仓库，仓库名需要和github用户名一致，后面加git.io，比如我的用户名是<strong>xxx</strong>，仓库名则是<strong>xxx.git.io</strong>。</p><p>仓库建成后，点击仓库中的点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后再等一会儿就能直接搜索网页xxx.git.io。</p><h3 id="2-2-连接Hexo和Github"><a href="#2-2-连接Hexo和Github" class="headerlink" title="2.2 连接Hexo和Github"></a>2.2 连接Hexo和Github</h3><p>生成SSH</p><p>打开terminal，回到根目录，输入GitHub用户名和注册邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@email.com&quot;</span></span><br></pre></td></tr></table></figure><p>然后生成密钥SSH key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;792321264@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>打开GitHub，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH。</p><p>在终端输入：<code>cat ~/.ssh/id_rsa.pub</code>，将输出的私钥信息复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code>，如果出现你的用户名，那就成功了。</p><h2 id="3-将本地Hexo部署到GitHub"><a href="#3-将本地Hexo部署到GitHub" class="headerlink" title="3. 将本地Hexo部署到GitHub"></a>3. 将本地Hexo部署到GitHub</h2><h3 id="3-1-部署Hexo到GitHub"><a href="#3-1-部署Hexo到GitHub" class="headerlink" title="3.1 部署Hexo到GitHub"></a>3.1 部署Hexo到GitHub</h3><p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>修改最后一行的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/godweiyang/xxx.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>repository修改为你自己的github项目地址。</p><p>在terminal博客根目录下安装deploy-git，也就是部署命令，这样才能将Hexo部署到GitHub。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>就能将博客内容push到github中渲染成网页。</p><h2 id="3-2-新建一篇文章"><a href="#3-2-新建一篇文章" class="headerlink" title="3.2 新建一篇文章"></a>3.2 新建一篇文章</h2><p>在terminal博客根目录下输入：<code>hexo new post &quot;article title&quot;</code></p><p>然后push到github：<code>hexo clean</code> <code>hexo g</code> <code>hexo d</code> </p><h2 id="4-踩坑指南"><a href="#4-踩坑指南" class="headerlink" title="4. 踩坑指南"></a>4. 踩坑指南</h2><h3 id="4-1-添加SSH-Keys"><a href="#4-1-添加SSH-Keys" class="headerlink" title="4.1 添加SSH Keys"></a>4.1 添加SSH Keys</h3><p>首先检查本地是否存在SSH Keys: <code>cd ~/.ssh</code></p><p>若存在，则备份和删除已经存在的SSH Keys：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">config id_rsa id_rsa.pub known_hosts</span><br><span class="line">mkdir key_backup</span><br><span class="line">cp id_rsa* key_backup</span><br><span class="line">rm id_rsa*</span><br></pre></td></tr></table></figure><p>生成新的SSH Key：(在询问输入存储 key 的文件 (file in which to save the key) 时，直接按回车，然后输入密码。)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail@youremail.com&quot;</span></span><br><span class="line">Genereting public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key</span><br><span class="line">(/Users/your_user_directory/.ssh/id_rsa):&lt;press enter&gt;</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):&lt;enter a passphrase&gt;</span><br><span class="line">Enter same passphrase again:&lt;enter passphrase again&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-主题butterfly报错"><a href="#4-2-主题butterfly报错" class="headerlink" title="4.2 主题butterfly报错"></a>4.2 主题butterfly报错</h3><ol><li>更换butterfly主题后报错：extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug</li></ol><p>解决办法：</p><p>打开terminal进入博客目录，输入：<code>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></p><p>然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="Refernce"><a href="#Refernce" class="headerlink" title="Refernce"></a>Refernce</h3><p><a href="https://zhuanlan.zhihu.com/p/35668237">https://zhuanlan.zhihu.com/p/35668237</a></p><p><a href="http://www.c-hasel.cn/2019/11/29/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/#tips">http://www.c-hasel.cn/2019/11/29/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/#tips</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;基于Hexo和GitHub创建个人博客，总的来说分为三步（MAC版）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;本地配置Hexo，生成静态博客页&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建GitHub page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将本地Hexo部署到GitHub&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
